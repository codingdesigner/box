//////////////////////////////
// Button Component Mixins
//////////////////////////////

//////////////////////////////
// Button Component Default Variables
$button-base-extend: true !default;
$button-size-normal-extend: true !default;
$button-size-large-extend: true !default;
$button-colors-extend: true !default;
$button-color-default: $cs-button-color-default !default;
$button-color-adjust: 20% !default;
$button-text-color-default: false !default;
//////////////////////////////


@mixin button-base($extend: $button-base-extend) {
  @if $extend {
    @extend %button-base-extend;
  }
  @else {
    display: inline-block;
    border-radius: 0.25em;
    border: none;
    font: {
      family: $font-sans;
      weight: normal;
    }
    text: {
      transform: uppercase;
      decoration: none;
    }
  }
}

@mixin button-size-normal($extend: $button-size-normal-extend) {
  @if $extend {
    @extend %button-size-normal-extend;
  }
  @else {
    padding: 0.2em 0.5em;
    font-size: 0.9em;
    line-height: 1.25;
  }
}

@mixin button-size-large($extend: $button-size-large-extend) {
  @if $extend {
    @extend %button-size-large-extend;
  }
  @else {
    padding: 0.5em 0.75em;
    font-size: 1.1em;
    line-height: 1.5;
  }
}

@mixin button-background($button-color: $button-color-default, $button-text-color: $button-text-color-default, $button-adjust: $button-color-adjust) {

  @if $button-text-color == false {
    @include readable-text($button-color);
  }

  @if cs-is-dark($button-color) {
    background-color: blend-screen($button-color, adjust-color($button-color, $lightness: $button-adjust * -1));
  }
  @else {
    background-color: blend-multiply($button-color, adjust-color($button-color, $lightness: $button-adjust * -1));
  }
}

@mixin button-hover($button-color: $button-color-default, $button-text-color: $button-text-color-default, $button-adjust: $button-color-adjust) {
  @if cs-is-dark($button-color) {
    &:hover {
      background-color: blend-screen($button-color, adjust-color($button-color, $lightness: $button-adjust * -.25));
    }
  }
  @else {
    &:hover {
      background-color: blend-multiply($button-color, adjust-color($button-color, $lightness: $button-adjust * -.25));
    }
  }
}

@mixin button-active($button-color: $button-color-default, $button-text-color: $button-text-color-default, $button-adjust: $button-color-adjust) {
  @if cs-is-dark($button-color) {
    &:active {
        background-color: blend-screen($button-color, adjust-color($button-color, $lightness: $button-adjust * 1));
      }
  }
  @else {
    &:active {
        background-color: blend-multiply($button-color, adjust-color($button-color, $lightness: $button-adjust * 1));
      }
  }
}


@mixin button-colors($button-color: $button-color-default, $button-text-color: $button-text-color-default, $button-adjust: $button-color-adjust,  $extend: $button-colors-extend) {
  @if ($button-color != $button-color-default) or ($button-text-color != $button-text-color-default) {
    $extend: false;
  }
  @if $extend {
    @extend %button-colors-extend;
  }
  @else {
    @include button-background($button-color, $button-text-color, $button-adjust);
    @include button-hover($button-color, $button-text-color, $button-adjust);
    @include button-active($button-color, $button-text-color, $button-adjust);
  }
}
